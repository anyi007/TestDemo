package com.example.lql.testdemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lql.testdemo.db.bean.shop.CollectionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_BEAN".
*/
public class CollectionBeanDao extends AbstractDao<CollectionBean, Void> {

    public static final String TABLENAME = "COLLECTION_BEAN";

    /**
     * Properties of entity CollectionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "UserId", false, "USER_ID");
        public final static Property CommodityId = new Property(1, Long.class, "CommodityId", false, "COMMODITY_ID");
        public final static Property Time = new Property(2, Long.class, "Time", false, "TIME");
    };


    public CollectionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_BEAN\" (" + //
                "\"USER_ID\" INTEGER," + // 0: UserId
                "\"COMMODITY_ID\" INTEGER," + // 1: CommodityId
                "\"TIME\" INTEGER);"); // 2: Time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionBean entity) {
        stmt.clearBindings();
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(1, UserId);
        }
 
        Long CommodityId = entity.getCommodityId();
        if (CommodityId != null) {
            stmt.bindLong(2, CommodityId);
        }
 
        Long Time = entity.getTime();
        if (Time != null) {
            stmt.bindLong(3, Time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionBean entity) {
        stmt.clearBindings();
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(1, UserId);
        }
 
        Long CommodityId = entity.getCommodityId();
        if (CommodityId != null) {
            stmt.bindLong(2, CommodityId);
        }
 
        Long Time = entity.getTime();
        if (Time != null) {
            stmt.bindLong(3, Time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CollectionBean readEntity(Cursor cursor, int offset) {
        CollectionBean entity = new CollectionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // CommodityId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // Time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectionBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommodityId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CollectionBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CollectionBean entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
