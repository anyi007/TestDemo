package com.example.lql.testdemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lql.testdemo.db.bean.shop.NoticeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTICE_BEAN".
*/
public class NoticeBeanDao extends AbstractDao<NoticeBean, Long> {

    public static final String TABLENAME = "NOTICE_BEAN";

    /**
     * Properties of entity NoticeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NoticeId = new Property(0, Long.class, "NoticeId", true, "_id");
        public final static Property NoticeTitle = new Property(1, String.class, "NoticeTitle", false, "NOTICE_TITLE");
        public final static Property NoticeContent = new Property(2, String.class, "NoticeContent", false, "NOTICE_CONTENT");
    };


    public NoticeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: NoticeId
                "\"NOTICE_TITLE\" TEXT," + // 1: NoticeTitle
                "\"NOTICE_CONTENT\" TEXT);"); // 2: NoticeContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoticeBean entity) {
        stmt.clearBindings();
 
        Long NoticeId = entity.getNoticeId();
        if (NoticeId != null) {
            stmt.bindLong(1, NoticeId);
        }
 
        String NoticeTitle = entity.getNoticeTitle();
        if (NoticeTitle != null) {
            stmt.bindString(2, NoticeTitle);
        }
 
        String NoticeContent = entity.getNoticeContent();
        if (NoticeContent != null) {
            stmt.bindString(3, NoticeContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoticeBean entity) {
        stmt.clearBindings();
 
        Long NoticeId = entity.getNoticeId();
        if (NoticeId != null) {
            stmt.bindLong(1, NoticeId);
        }
 
        String NoticeTitle = entity.getNoticeTitle();
        if (NoticeTitle != null) {
            stmt.bindString(2, NoticeTitle);
        }
 
        String NoticeContent = entity.getNoticeContent();
        if (NoticeContent != null) {
            stmt.bindString(3, NoticeContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoticeBean readEntity(Cursor cursor, int offset) {
        NoticeBean entity = new NoticeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // NoticeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NoticeTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // NoticeContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoticeBean entity, int offset) {
        entity.setNoticeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoticeTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoticeContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoticeBean entity, long rowId) {
        entity.setNoticeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoticeBean entity) {
        if(entity != null) {
            return entity.getNoticeId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
