package com.example.lql.testdemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lql.testdemo.db.bean.shop.AddressBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS_BEAN".
*/
public class AddressBeanDao extends AbstractDao<AddressBean, Long> {

    public static final String TABLENAME = "ADDRESS_BEAN";

    /**
     * Properties of entity AddressBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AddressId = new Property(0, Long.class, "AddressId", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "UserId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "UserName", false, "USER_NAME");
        public final static Property Province = new Property(3, String.class, "Province", false, "PROVINCE");
        public final static Property City = new Property(4, String.class, "City", false, "CITY");
        public final static Property Area = new Property(5, String.class, "Area", false, "AREA");
        public final static Property DetailedAddress = new Property(6, String.class, "DetailedAddress", false, "DETAILED_ADDRESS");
        public final static Property Phone = new Property(7, String.class, "Phone", false, "PHONE");
        public final static Property DefaultAddress = new Property(8, boolean.class, "DefaultAddress", false, "DEFAULT_ADDRESS");
    };


    public AddressBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AddressBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDRESS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: AddressId
                "\"USER_ID\" INTEGER," + // 1: UserId
                "\"USER_NAME\" TEXT," + // 2: UserName
                "\"PROVINCE\" TEXT," + // 3: Province
                "\"CITY\" TEXT," + // 4: City
                "\"AREA\" TEXT," + // 5: Area
                "\"DETAILED_ADDRESS\" TEXT," + // 6: DetailedAddress
                "\"PHONE\" TEXT," + // 7: Phone
                "\"DEFAULT_ADDRESS\" INTEGER NOT NULL );"); // 8: DefaultAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDRESS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddressBean entity) {
        stmt.clearBindings();
 
        Long AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindLong(1, AddressId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(2, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String Province = entity.getProvince();
        if (Province != null) {
            stmt.bindString(4, Province);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(5, City);
        }
 
        String Area = entity.getArea();
        if (Area != null) {
            stmt.bindString(6, Area);
        }
 
        String DetailedAddress = entity.getDetailedAddress();
        if (DetailedAddress != null) {
            stmt.bindString(7, DetailedAddress);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(8, Phone);
        }
        stmt.bindLong(9, entity.getDefaultAddress() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddressBean entity) {
        stmt.clearBindings();
 
        Long AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindLong(1, AddressId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(2, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String Province = entity.getProvince();
        if (Province != null) {
            stmt.bindString(4, Province);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(5, City);
        }
 
        String Area = entity.getArea();
        if (Area != null) {
            stmt.bindString(6, Area);
        }
 
        String DetailedAddress = entity.getDetailedAddress();
        if (DetailedAddress != null) {
            stmt.bindString(7, DetailedAddress);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(8, Phone);
        }
        stmt.bindLong(9, entity.getDefaultAddress() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddressBean readEntity(Cursor cursor, int offset) {
        AddressBean entity = new AddressBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // AddressId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Province
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // City
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Area
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DetailedAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Phone
            cursor.getShort(offset + 8) != 0 // DefaultAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddressBean entity, int offset) {
        entity.setAddressId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvince(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArea(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetailedAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDefaultAddress(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddressBean entity, long rowId) {
        entity.setAddressId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddressBean entity) {
        if(entity != null) {
            return entity.getAddressId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
