package com.example.lql.testdemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lql.testdemo.db.bean.shop.OrderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_BEAN".
*/
public class OrderBeanDao extends AbstractDao<OrderBean, Long> {

    public static final String TABLENAME = "ORDER_BEAN";

    /**
     * Properties of entity OrderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderId = new Property(0, Long.class, "OrderId", true, "_id");
        public final static Property OrderState = new Property(1, Integer.class, "OrderState", false, "ORDER_STATE");
        public final static Property SumPrice = new Property(2, Double.class, "SumPrice", false, "SUM_PRICE");
        public final static Property AddressId = new Property(3, Long.class, "AddressId", false, "ADDRESS_ID");
    };


    public OrderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OrderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: OrderId
                "\"ORDER_STATE\" INTEGER," + // 1: OrderState
                "\"SUM_PRICE\" REAL," + // 2: SumPrice
                "\"ADDRESS_ID\" INTEGER);"); // 3: AddressId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderBean entity) {
        stmt.clearBindings();
 
        Long OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindLong(1, OrderId);
        }
 
        Integer OrderState = entity.getOrderState();
        if (OrderState != null) {
            stmt.bindLong(2, OrderState);
        }
 
        Double SumPrice = entity.getSumPrice();
        if (SumPrice != null) {
            stmt.bindDouble(3, SumPrice);
        }
 
        Long AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindLong(4, AddressId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderBean entity) {
        stmt.clearBindings();
 
        Long OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindLong(1, OrderId);
        }
 
        Integer OrderState = entity.getOrderState();
        if (OrderState != null) {
            stmt.bindLong(2, OrderState);
        }
 
        Double SumPrice = entity.getSumPrice();
        if (SumPrice != null) {
            stmt.bindDouble(3, SumPrice);
        }
 
        Long AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindLong(4, AddressId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderBean readEntity(Cursor cursor, int offset) {
        OrderBean entity = new OrderBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // OrderId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // OrderState
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // SumPrice
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // AddressId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderBean entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSumPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAddressId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderBean entity, long rowId) {
        entity.setOrderId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderBean entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
