package com.example.lql.testdemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lql.testdemo.db.bean.shop.LogisticsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGISTICS_BEAN".
*/
public class LogisticsBeanDao extends AbstractDao<LogisticsBean, Void> {

    public static final String TABLENAME = "LOGISTICS_BEAN";

    /**
     * Properties of entity LogisticsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderId = new Property(0, Long.class, "OrderId", false, "ORDER_ID");
        public final static Property Time = new Property(1, Long.class, "Time", false, "TIME");
        public final static Property Describe = new Property(2, String.class, "Describe", false, "DESCRIBE");
    };


    public LogisticsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LogisticsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGISTICS_BEAN\" (" + //
                "\"ORDER_ID\" INTEGER," + // 0: OrderId
                "\"TIME\" INTEGER," + // 1: Time
                "\"DESCRIBE\" TEXT);"); // 2: Describe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGISTICS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogisticsBean entity) {
        stmt.clearBindings();
 
        Long OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindLong(1, OrderId);
        }
 
        Long Time = entity.getTime();
        if (Time != null) {
            stmt.bindLong(2, Time);
        }
 
        String Describe = entity.getDescribe();
        if (Describe != null) {
            stmt.bindString(3, Describe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogisticsBean entity) {
        stmt.clearBindings();
 
        Long OrderId = entity.getOrderId();
        if (OrderId != null) {
            stmt.bindLong(1, OrderId);
        }
 
        Long Time = entity.getTime();
        if (Time != null) {
            stmt.bindLong(2, Time);
        }
 
        String Describe = entity.getDescribe();
        if (Describe != null) {
            stmt.bindString(3, Describe);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LogisticsBean readEntity(Cursor cursor, int offset) {
        LogisticsBean entity = new LogisticsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // OrderId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // Time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Describe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogisticsBean entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LogisticsBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LogisticsBean entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
