package com.example.lql.testdemo.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lql.testdemo.db.bean.shop.CommodityBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMODITY_BEAN".
*/
public class CommodityBeanDao extends AbstractDao<CommodityBean, Long> {

    public static final String TABLENAME = "COMMODITY_BEAN";

    /**
     * Properties of entity CommodityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CommodityId = new Property(0, Long.class, "CommodityId", true, "_id");
        public final static Property CommodityTypeId = new Property(1, Long.class, "CommodityTypeId", false, "COMMODITY_TYPE_ID");
        public final static Property CommodityPic = new Property(2, String.class, "CommodityPic", false, "COMMODITY_PIC");
        public final static Property CommodityPrice = new Property(3, Double.class, "CommodityPrice", false, "COMMODITY_PRICE");
        public final static Property Stock = new Property(4, Integer.class, "Stock", false, "STOCK");
        public final static Property CommodityDescribe = new Property(5, String.class, "CommodityDescribe", false, "COMMODITY_DESCRIBE");
        public final static Property CommodityName = new Property(6, String.class, "CommodityName", false, "COMMODITY_NAME");
        public final static Property CommoditySize = new Property(7, String.class, "CommoditySize", false, "COMMODITY_SIZE");
        public final static Property HotCommodity = new Property(8, boolean.class, "HotCommodity", false, "HOT_COMMODITY");
    };


    public CommodityBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMODITY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: CommodityId
                "\"COMMODITY_TYPE_ID\" INTEGER," + // 1: CommodityTypeId
                "\"COMMODITY_PIC\" TEXT," + // 2: CommodityPic
                "\"COMMODITY_PRICE\" REAL," + // 3: CommodityPrice
                "\"STOCK\" INTEGER," + // 4: Stock
                "\"COMMODITY_DESCRIBE\" TEXT," + // 5: CommodityDescribe
                "\"COMMODITY_NAME\" TEXT," + // 6: CommodityName
                "\"COMMODITY_SIZE\" TEXT," + // 7: CommoditySize
                "\"HOT_COMMODITY\" INTEGER NOT NULL );"); // 8: HotCommodity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMODITY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommodityBean entity) {
        stmt.clearBindings();
 
        Long CommodityId = entity.getCommodityId();
        if (CommodityId != null) {
            stmt.bindLong(1, CommodityId);
        }
 
        Long CommodityTypeId = entity.getCommodityTypeId();
        if (CommodityTypeId != null) {
            stmt.bindLong(2, CommodityTypeId);
        }
 
        String CommodityPic = entity.getCommodityPic();
        if (CommodityPic != null) {
            stmt.bindString(3, CommodityPic);
        }
 
        Double CommodityPrice = entity.getCommodityPrice();
        if (CommodityPrice != null) {
            stmt.bindDouble(4, CommodityPrice);
        }
 
        Integer Stock = entity.getStock();
        if (Stock != null) {
            stmt.bindLong(5, Stock);
        }
 
        String CommodityDescribe = entity.getCommodityDescribe();
        if (CommodityDescribe != null) {
            stmt.bindString(6, CommodityDescribe);
        }
 
        String CommodityName = entity.getCommodityName();
        if (CommodityName != null) {
            stmt.bindString(7, CommodityName);
        }
 
        String CommoditySize = entity.getCommoditySize();
        if (CommoditySize != null) {
            stmt.bindString(8, CommoditySize);
        }
        stmt.bindLong(9, entity.getHotCommodity() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommodityBean entity) {
        stmt.clearBindings();
 
        Long CommodityId = entity.getCommodityId();
        if (CommodityId != null) {
            stmt.bindLong(1, CommodityId);
        }
 
        Long CommodityTypeId = entity.getCommodityTypeId();
        if (CommodityTypeId != null) {
            stmt.bindLong(2, CommodityTypeId);
        }
 
        String CommodityPic = entity.getCommodityPic();
        if (CommodityPic != null) {
            stmt.bindString(3, CommodityPic);
        }
 
        Double CommodityPrice = entity.getCommodityPrice();
        if (CommodityPrice != null) {
            stmt.bindDouble(4, CommodityPrice);
        }
 
        Integer Stock = entity.getStock();
        if (Stock != null) {
            stmt.bindLong(5, Stock);
        }
 
        String CommodityDescribe = entity.getCommodityDescribe();
        if (CommodityDescribe != null) {
            stmt.bindString(6, CommodityDescribe);
        }
 
        String CommodityName = entity.getCommodityName();
        if (CommodityName != null) {
            stmt.bindString(7, CommodityName);
        }
 
        String CommoditySize = entity.getCommoditySize();
        if (CommoditySize != null) {
            stmt.bindString(8, CommoditySize);
        }
        stmt.bindLong(9, entity.getHotCommodity() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommodityBean readEntity(Cursor cursor, int offset) {
        CommodityBean entity = new CommodityBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // CommodityId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // CommodityTypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CommodityPic
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // CommodityPrice
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Stock
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CommodityDescribe
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CommodityName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CommoditySize
            cursor.getShort(offset + 8) != 0 // HotCommodity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommodityBean entity, int offset) {
        entity.setCommodityId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommodityTypeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCommodityPic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommodityPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setStock(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCommodityDescribe(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommodityName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommoditySize(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHotCommodity(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommodityBean entity, long rowId) {
        entity.setCommodityId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommodityBean entity) {
        if(entity != null) {
            return entity.getCommodityId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
